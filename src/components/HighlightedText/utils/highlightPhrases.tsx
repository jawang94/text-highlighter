/* eslint-disable react/no-array-index-key */
import React from 'react';

import HighlightedTextObject from '../HighlightedTextObject';
import createHighlightedTextBlocks from './createHighlightedTextBlocks';

// This method takes the highlightsMap generated by ./parsePhrases.ts and middlemans the work needed to create our actual DOM elements.
// Defers a lot of work to `./createHighlightedTextBlocks.tsx.
// At the end, we run a final loop to push either a default text element or a highlighted text element into our output.
const highlightPhrases = (
  text: string,
  highlightsMap: Map<number, HighlightedTextObject>,
): any[] => {
  // Converting to an array was a last-minute decision, as it became apparent we needed a way to keep track of remaining highlights for our whitespace deferral.
  const highlightsMapToArray = Array.from(highlightsMap).map(([key, value]) => ({ key, value }));
  let highlightedPhrasesArray: any = text.split(' ');

  for (let i = 0; i < highlightsMapToArray.length; i += 1) {
    const {
      key,
      value: { word, highlightColor, textColor, endOffset, startOffset },
    } = highlightsMapToArray[i];
    const remainingHighlights = highlightsMapToArray.slice(i);
    const textBlockProps = {
      index: key,
      word,
      highlightColor,
      textColor,
      startOffset,
      endOffset,
      remainingHighlights,
      highlightedPhrasesArray,
    };

    highlightedPhrasesArray = createHighlightedTextBlocks(textBlockProps);
  }

  // Final loop, extract either a HighlightedTextBlock element or create a default unhighlighted text element. Everything is a <span/>
  highlightedPhrasesArray.forEach((stringOrHighlightedTextBlock: string | any, i: number) => {
    if (typeof stringOrHighlightedTextBlock === 'object') {
      highlightedPhrasesArray[i] = stringOrHighlightedTextBlock.element;
    } else {
      highlightedPhrasesArray[i] = (
        <span key={i + highlightedPhrasesArray[i]}> {highlightedPhrasesArray[i]} </span>
      );
    }
  });

  return highlightedPhrasesArray;
};

export default highlightPhrases;
